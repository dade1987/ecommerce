<?php

namespace App\Filament\Resources\ReservationResource\Widgets;

use Carbon\Carbon;
use Filament\Forms\Form;
use App\Models\Reservation;
use Illuminate\Database\Eloquent\Model;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\DateTimePicker;
use Saade\FilamentFullCalendar\Data\EventData;
use Saade\FilamentFullCalendar\Actions\CreateAction;
use Saade\FilamentFullCalendar\Widgets\FullCalendarWidget;


class CalendarWidget extends FullCalendarWidget
{

    public Model|string|null $model = Reservation::class;
    protected function headerActions(): array
    {
        return [
            CreateAction::make()
                ->mountUsing(
                    function (Form $form, array $arguments) {

                        $form->fill([
                            'date_time' => $arguments['start'] ?? null,
                            //'ends_at' => $arguments['end'] ?? null
                        ]);

                        //dd($form);
                    }
                )
        ];
    }
    /**
     * FullCalendar will call this function whenever it needs new event data.
     * This is triggered when the user clicks prev/next or switches views on the calendar.
     */
    public function fetchEvents(array $fetchInfo): array
    {
        /*dd([$fetchInfo,Reservation::query()
            ->where('date_time', '>=', $fetchInfo['start'])
            ->where('date_time', '<=', $fetchInfo['end'])->toSql()]);*/

        // You can use $fetchInfo to filter events by date.
        // This method should return an array of event-like objects. See: https://github.com/saade/filament-fullcalendar/blob/3.x/#returning-events
        // You can also return an array of EventData objects. See: https://github.com/saade/filament-fullcalendar/blob/3.x/#the-eventdata-class
        $response = Reservation::query()
            ->where('date_time', '>=', $fetchInfo['start'])
            ->where('date_time', '<=', $fetchInfo['end'])

            ->get()
            ->map(
                fn(Reservation $event) =>

                EventData::make()
                    ->id($event->id)
                    ->title($event->name)
                    ->start($event->date_time)
                    //la data Ã¨ in Carbon
                    ->end(Carbon::parse($event->date_time)->addMinutes(30)->toDateTimeString())
                    //->url('#', true)
                    ->backgroundColor('red')
                    
            )
            ->all();

        dd($response);

        return $response;
    }
    public function getFormSchema(): array
    {
        return [
            TextInput::make('name'),

            // Forms\Components\Grid::make()
            //->schema([
            DateTimePicker::make('date_time')->readOnly(),

            // Forms\Components\DateTimePicker::make('ends_at'),
            // ]),
        ];
    }

    public static function canView(): bool
    {
        return false;
    }
}
